# -*- coding: utf-8 -*-
"""Despliegue predicción de demanda.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jvYLpQssrIJFjpq5cm05NeW4o7LplFNq

# Despliegue

- Cargamos el modelo
- Cargamos los datos futuros
- Preparar los datos futuros
- Aplicamos el modelo para la predicción
"""

#Cargamos librerías principales
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#Cargamos el modelo
import pickle
filename = 'modelo-ensamble-reg.pkl'
model_stack, variables, min_max_scaler = pickle.load(open(filename, 'rb'))

from collections.abc import Sized
#Interfaz gráfica
#Se crea interfaz gráfica con streamlit para captura de los datos
#!pip install streamlit
import streamlit as st

st.title('Predicción de la demanda mensual por producto')


EnglishProductName = st.selectbox('Producto', ["'Sport-100 Helmet Red'", "'Sport-100 Helmet Black'", "'Sport-100 Helmet Blue'", "'AWC Logo Cap'", "'Long-Sleeve Logo Jersey S'", "'Long-Sleeve Logo Jersey M'", "'Long-Sleeve Logo Jersey L'", "'Long-Sleeve Logo Jersey XL'", "'Road-150 Red 62'", "'Road-150 Red 44'", "'Road-150 Red 48'", "'Road-150 Red 52'", "'Road-150 Red 56'", "'Road-650 Red 58'", "'Road-650 Red 60'", "'Road-650 Red 62'", "'Road-650 Red 44'", "'Road-650 Red 48'", "'Road-650 Red 52'", "'Road-650 Black 58'", "'Road-650 Black 60'", "'Road-650 Black 62'", "'Road-650 Black 44'", "'Road-650 Black 48'", "'Road-650 Black 52'", "'Mountain-100 Silver 38'", "'Mountain-100 Silver 42'", "'Mountain-100 Silver 44'", "'Mountain-100 Silver 48'", "'Mountain-100 Black 38'", "'Mountain-100 Black 42'", "'Mountain-100 Black 44'", "'Mountain-100 Black 48'", "'Mountain-200 Silver 38'", "'Mountain-200 Silver 42'", "'Mountain-200 Silver 46'", "'Mountain-200 Black 38'", "'Mountain-200 Black 42'", "'Mountain-200 Black 46'", "'Road-250 Red 44'", "'Road-250 Red 48'", "'Road-250 Red 52'", "'Road-250 Red 58'", "'Road-250 Black 44'", "'Road-250 Black 48'", "'Road-250 Black 52'", "'Road-250 Black 58'", "'Road-550-W Yellow 38'", "'Road-550-W Yellow 40'", "'Road-550-W Yellow 42'", "'Road-550-W Yellow 44'", "'Road-550-W Yellow 48'", "'Half-Finger Gloves S'", "'Half-Finger Gloves M'", "'Half-Finger Gloves L'", "'Classic Vest S'", "'Classic Vest M'", "'Classic Vest L'", "'Womens Mountain Shorts S'", "'Womens Mountain Shorts M'", "'Womens Mountain Shorts L'", "'Water Bottle - 30 oz.'", "'Mountain Bottle Cage'", "'Road Bottle Cage'", "'Patch Kit/8 Patches'", "'Racing Socks M'", "'Racing Socks L'", "'Hitch Rack - 4-Bike'", "'Bike Wash - Dissolver'", "'Fender Set - Mountain'", "'All-Purpose Bike Stand'", "'Hydration Pack - 70 oz.'", "'Short-Sleeve Classic Jersey S'", "'Short-Sleeve Classic Jersey M'", "'Short-Sleeve Classic Jersey L'", "'Short-Sleeve Classic Jersey XL'", "'Mountain Tire Tube'", "'Road Tire Tube'", "'Touring Tire Tube'", "'LL Mountain Tire'", "'ML Mountain Tire'", "'HL Mountain Tire'", "'LL Road Tire'", "'ML Road Tire'", "'HL Road Tire'", "'Touring Tire'", "'Touring-2000 Blue 60'", "'Touring-1000 Yellow 46'", "'Touring-1000 Yellow 50'", "'Touring-1000 Yellow 54'", "'Touring-1000 Yellow 60'", "'Touring-3000 Blue 54'", "'Touring-3000 Blue 58'", "'Touring-3000 Blue 62'", "'Touring-3000 Yellow 44'", "'Touring-3000 Yellow 50'", "'Touring-3000 Yellow 54'", "'Touring-3000 Yellow 58'", "'Touring-3000 Yellow 62'", "'Touring-1000 Blue 46'", "'Touring-1000 Blue 50'", "'Touring-1000 Blue 54'", "'Touring-1000 Blue 60'", "'Touring-2000 Blue 46'", "'Touring-2000 Blue 50'", "'Touring-2000 Blue 54'", "'Road-350-W Yellow 40'", "'Road-350-W Yellow 42'", "'Road-350-W Yellow 44'", "'Road-350-W Yellow 48'", "'Road-750 Black 58'", "'Touring-3000 Blue 44'", "'Touring-3000 Blue 50'", "'Mountain-400-W Silver 38'", "'Mountain-400-W Silver 40'", "'Mountain-400-W Silver 42'", "'Mountain-400-W Silver 46'", "'Mountain-500 Silver 40'", "'Mountain-500 Silver 42'", "'Mountain-500 Silver 44'", "'Mountain-500 Silver 48'", "'Mountain-500 Silver 52'", "'Mountain-500 Black 40'", "'Mountain-500 Black 42'", "'Mountain-500 Black 44'", "'Mountain-500 Black 48'", "'Mountain-500 Black 52'", "'Road-750 Black 44'", "'Road-750 Black 48'", "'Road-750 Black 52'"])
Category= st.selectbox('Categoria', ["Accessories", "Clothing", "Bikes"])
Subcategory = st.selectbox('Subcategoría', ["Helmets", "Caps", "Jerseys", "'Road Bikes'", "'Mountain Bikes'", "Gloves", "Vests", "Shorts", "'Bottles and Cages'", "'Tires and Tubes'", "Socks", "'Bike Racks'", "Cleaners", "Fenders", "'Bike Stands'", "'Hydration Packs'", "'Touring Bikes'"])
ListPrice = st.slider('Precio de Venta', min_value=0, max_value=1000, value=20, step=1)
Margin = st.slider('Precio de Venta', min_value=0, max_value=1000, value=20, step=1)
Color = st.selectbox('Sexo', ["Red", "Black", "Blue", "Multi", "Silver", "Yellow", "nan", "White"])
Size = st.selectbox('Talla' , ["nan", "S", "M", "L", "XL", "62", "44", "48", "52", "56", "58", "60", "38", "42", "46", "40", "70", "50", "54"])
CalendarYear = st.selectbox('Año', [2018, 2019, 2020,2021,2022,2023,2024,2025])
MonthNumberOfYear = st.selectbox('Mes', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
Is_Holiday_Season = st.selectbox('Es Feriado', ["False", "True"])
Product_Age_Months= st.slider('Edad del Producto', min_value=0, max_value=100, value=20, step=1)
descuento_promedio_mes_anterior = st.slider('Descuento promedio del mes anterior', min_value=0, max_value=1, value=20, step=1)

#Dataframe
datos = [[EnglishProductName, Category, Subcategory, ListPrice, Margin, Color, Size, CalendarYear, MonthNumberOfYear, Is_Holiday_Season]]
data = pd.DataFrame(datos, columns=['EnglishProductName', 'Category', 'Subcategory', 'ListPrice', 'Margin', 'Color', 'Size', 'CalendarYear', 'MonthNumberOfYear', 'Is_Holiday_Season'])
data.head()

"""## Preparación"""

#Se realiza la preparación
data_preparada=data.copy()
data_preparada['Is_Holiday_Season']=data_preparada['Is_Holiday_Season'].astype(bool)
data_preparada.head()

#En despliegue drop_first= False
#Dummies para las variables predictoras
data_preparada = pd.get_dummies(data, columns=['EnglishProductName','Category','Subcategory','Color','Size'], drop_first=False)
data_preparada.head()

#Se adicionan las columnas faltantes
data_preparada=data_preparada.reindex(columns=variables,fill_value=0)
data_preparada.head()

for column in data_preparada.columns:
    if data_preparada[column].dtype == 'object':
        print(f"Convirtiendo la columna booleana '{column}' a formato bool)...")
        data_preparada[column] = data_preparada[column].astype(bool)
data_preparada.info()

"""# **Predicciones**"""

#Hacemos la predicción con el Tree

y_stack = model_stack.predict(data_preparada)
print(y_stack)

data['Prediccion Stack']=y_stack
data.head()

